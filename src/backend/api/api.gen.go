// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// Profile defines model for Profile.
type Profile struct {
	// Avatar ボットのアバター画像URL（オプション）
	Avatar *string `json:"avatar,omitempty"`

	// CreatedAt プロフィール作成日時
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Language ボットの使用言語（オプション）
	Language *string `json:"language,omitempty"`

	// Name ボットの名前
	Name string `json:"name"`

	// Personality ボットの性格の説明
	Personality string `json:"personality"`

	// UpdatedAt プロフィール更新日時
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// PutBotBotIdProfileJSONRequestBody defines body for PutBotBotIdProfile for application/json ContentType.
type PutBotBotIdProfileJSONRequestBody = Profile

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ボットのプロフィールを取得する
	// (GET /bot/{botId}/profile)
	GetBotBotIdProfile(c *gin.Context, botId string)
	// ボットのプロフィールを登録または更新する
	// (PUT /bot/{botId}/profile)
	PutBotBotIdProfile(c *gin.Context, botId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetBotBotIdProfile operation middleware
func (siw *ServerInterfaceWrapper) GetBotBotIdProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "botId" -------------
	var botId string

	err = runtime.BindStyledParameter("simple", false, "botId", c.Param("botId"), &botId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter botId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetBotBotIdProfile(c, botId)
}

// PutBotBotIdProfile operation middleware
func (siw *ServerInterfaceWrapper) PutBotBotIdProfile(c *gin.Context) {

	var err error

	// ------------- Path parameter "botId" -------------
	var botId string

	err = runtime.BindStyledParameter("simple", false, "botId", c.Param("botId"), &botId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter botId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutBotBotIdProfile(c, botId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/bot/:botId/profile", wrapper.GetBotBotIdProfile)
	router.PUT(options.BaseURL+"/bot/:botId/profile", wrapper.PutBotBotIdProfile)
}

type GetBotBotIdProfileRequestObject struct {
	BotId string `json:"botId"`
}

type GetBotBotIdProfileResponseObject interface {
	VisitGetBotBotIdProfileResponse(w http.ResponseWriter) error
}

type GetBotBotIdProfile200JSONResponse Profile

func (response GetBotBotIdProfile200JSONResponse) VisitGetBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetBotBotIdProfile404Response struct {
}

func (response GetBotBotIdProfile404Response) VisitGetBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetBotBotIdProfile500Response struct {
}

func (response GetBotBotIdProfile500Response) VisitGetBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PutBotBotIdProfileRequestObject struct {
	BotId string `json:"botId"`
	Body  *PutBotBotIdProfileJSONRequestBody
}

type PutBotBotIdProfileResponseObject interface {
	VisitPutBotBotIdProfileResponse(w http.ResponseWriter) error
}

type PutBotBotIdProfile200JSONResponse Profile

func (response PutBotBotIdProfile200JSONResponse) VisitPutBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutBotBotIdProfile400Response struct {
}

func (response PutBotBotIdProfile400Response) VisitPutBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PutBotBotIdProfile500Response struct {
}

func (response PutBotBotIdProfile500Response) VisitPutBotBotIdProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// ボットのプロフィールを取得する
	// (GET /bot/{botId}/profile)
	GetBotBotIdProfile(ctx context.Context, request GetBotBotIdProfileRequestObject) (GetBotBotIdProfileResponseObject, error)
	// ボットのプロフィールを登録または更新する
	// (PUT /bot/{botId}/profile)
	PutBotBotIdProfile(ctx context.Context, request PutBotBotIdProfileRequestObject) (PutBotBotIdProfileResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetBotBotIdProfile operation middleware
func (sh *strictHandler) GetBotBotIdProfile(ctx *gin.Context, botId string) {
	var request GetBotBotIdProfileRequestObject

	request.BotId = botId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBotBotIdProfile(ctx, request.(GetBotBotIdProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBotBotIdProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetBotBotIdProfileResponseObject); ok {
		if err := validResponse.VisitGetBotBotIdProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutBotBotIdProfile operation middleware
func (sh *strictHandler) PutBotBotIdProfile(ctx *gin.Context, botId string) {
	var request PutBotBotIdProfileRequestObject

	request.BotId = botId

	var body PutBotBotIdProfileJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutBotBotIdProfile(ctx, request.(PutBotBotIdProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutBotBotIdProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutBotBotIdProfileResponseObject); ok {
		if err := validResponse.VisitPutBotBotIdProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RUTU8bSRD9L7V79GLvLnuZG1xWlvaAVsoJcWg8bTPIMz309CBZ1khMtxKZr2ARgoNA",
	"gYQkECeYfCqJMPBjCo+dE38h6hkcviwgBxLJ8rRmul69qveqypBjtssc6ggPjDJ4uTFqk/g4xFneKlJ9",
	"dDlzKRcWjT+QSSII1yeTejluucJiDhiAag2VQlXBsIHyKaoqykNUzfbSXkst3Pn/v+NmBWUdVQ3lJ1Rb",
	"qN4fN6chBaLkUjDAE9xyChCkIMcpEdQcEL2S1FDtoHqIchNVE9Wro/21qFKNas+jFQkpyDNuEwEGmETQ",
	"P4Rl014ZisQp+KRAr67iaP+wvbTd2Z7q1B/fmLxD7GtgW9X51vR8r1iXco85pGiJ0tUQ0dRWtNHEsNGp",
	"v44e3e+F5bvmzZsYrX6Ilt/8UBODFHA64VucmmAMJ2Wfr2DkewwbHac5AYEOspw8u8Y8l+mpu62NtygX",
	"240n7eo9DFdQzmK4jjLEsDEwlNX0LKHdegbpEkwSnVyfpNxLUv/Zl+nL6I4xlzrEtcCAv+NXKXCJGIs9",
	"nx5lIl0eZSJrBmn3dDIKNG6vHg+iK8maYMC/VAwy/cua3SHSUJzYVFDugTFcBktn1vDQdQzE6HC2q4L7",
	"NHUykzrNRQVG9GXPZY6XTOZfmYx+5JgjqBMTI65btHIxtfS4p8stn8H7ndM8GPBb+nQJpE82QLrLPNbs",
	"vFZRpdqaWdcd68/0XynlXOfFLIbPMJxFOYPhAYarKB/oyH8Sqhci5cdYqKr+l9uoXqJqxk7zfNsmvHSt",
	"UVAuthaWWwe1xCLxTPk9JBryf6ZEEz71xCAzS7ejznk2wa83RQ9pjz7PRzubGNZR1VHuanXlF1SV2/VC",
	"e2Xv69y72HjrGO4mW65rjSAIvgUAAP//YyRjAv8GAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
